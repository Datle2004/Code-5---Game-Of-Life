import pygame
import sys
import Main
import numpy as np 
import Game
import Example
pygame.init()
pygame.font.init()

class Happy:
    def __init__(self, grid, screen):
        self.grid = grid
        self.screen = screen
        self.font = pygame.font.Font('freesansbold.ttf', 30)

    def draw(self, text, i):
        pygame.draw.rect(self.screen, (192, 192, 192), (i, 650, 150, 50), 0, 5)
        pygame.draw.rect(self.screen, 'dark grey', (i, 650, 150, 50), 3, 5) 
        text_surface = self.font.render(text, True, 'black')
        self.screen.blit(text_surface, (i + (150 - text_surface.get_width()) // 2, 650 + 10))
        return pygame.Rect(i, 650, 150, 50)
    
    def main(self):
        reset_pos = self.draw('Reset', 300)
        back_pos = self.draw('Back', 750)
        c_grid = self.grid
        game = Game.Run(self.screen)
        var = Example.Variant(self.screen)
        
        live_cell = [2, 3]
        dead_cell = [3]
        rows = len(self.grid)
        cols = len(self.grid[0])
        clock = pygame.time.Clock()
        FPS = 5
        
        start = False
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_RETURN:
                        start = True
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if back_pos.collidepoint(event.pos):
                        var.main()
                    elif reset_pos.collidepoint(event.pos):
                        self.grid = c_grid
                        start = False

            game.cell_size = 600 // max(rows, cols)
            game.draw_grid(rows, cols)
            game.draw_cells(self.grid)
            if start:
                self.grid = game.next_generation(self.grid, live_cell, dead_cell)
            pygame.display.update()
            clock.tick(FPS) 
        pygame.quit()
        sys.exit()
